{"version":3,"sources":["actions.ts","colors.ts","components/Button.ts","components/Alert.tsx","containers/Player/index.tsx","containers/AlertWinner/index.tsx","containers/ButtonStart/index.tsx","containers/App/index.tsx","serviceWorker.ts","components/GlobalStyle.ts","helpers.ts","reducers.ts","index.tsx"],"names":["START_GAME","ADD_NUMBER","RESET_GAME","COLOR","primary","primaryLight","primaryLighter","Button","styled","button","_templateObject","Overlay","div","Alert_templateObject","AlertContainer","_templateObject2","alertPortal","document","getElementById","stopPropagation","e","Alert","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","el","createElement","appendChild","removeChild","_this$props","isVisible","message","onConfirm","react_default","a","onClick","components_Button","type","ReactDOM","createPortal","renderAlert","React","Component","Container","Player_templateObject","_ref","disabled","PlayerName","h2","Player_templateObject2","_ref2","highlight","concat","TableContainer","_templateObject3","_ref3","Table","table","_templateObject4","Td","td","_templateObject5","_ref4","selected","_ref5","CompleteCollectionContainer","_templateObject6","Player","state","isAlertVisible","num","_this2","onSelectNumber","isActive","player","_sample","setState","_this3","_this$props2","_map","_chunk","row","rowIndex","entityList","entity","columnIndex","selectable","isSelected","onClickHandler","makeTdClickHandler","key","handleTdErrorClick","join","_this$props$player","matchedIndexList","combination","index","_this$props3","name","renderTableRows","renderMatchedCombinationList","Alert_Alert","handleAlertConfirm","bind","withConnect","connect","dispatch","addNumber","winners","players","filter","isWin","length","winnerName","react","isGameStarted","AppContainer","App_templateObject","Header","header","App_templateObject2","PlayerContainer","main","App_templateObject3","currentPlayerIndex","playerNodeList","map","containers_Player","containers_ButtonStart","containers_AlertWinner","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","makeSequence","multiplier","count","offset","arguments","undefined","_range","BINGO_INDEX_COMBINATION","toConsumableArray","remainder","makeNewBingo","_shuffle","makeNewPlayerMapper","newTable","list","markNewSelected","newMatchedIndexList","targetList","selectedIndex","_findIndex","value","includes","_every","makeMatchedIndexList","objectSpread","initialState","_fill","Array","store","createStore","action","nextPlayerIndex","newPlayers","_some","__REDUX_DEVTOOLS_EXTENSION__","render","es","components_GlobalStyle","containers_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa1cdd8a.chunk.js","sourcesContent":["export const START_GAME = 'START_GAME';\nexport const ADD_NUMBER = 'ADD_NUMBER';\nexport const RESET_GAME = 'RESET_GAME';\n\nexport type Action = ReturnType<\n  typeof startGame |\n  typeof addNumber |\n  typeof resetGame\n>;\n\n/**\n * 새 게임을 시작하는 액션을 반환합니다.\n */\nexport function startGame() {\n  return {\n    type: START_GAME,\n  } as const;\n}\n\n/**\n * 숫자를 더하는 액션을 반환합니다.\n * @param num\n */\nexport function addNumber(num: number) {\n  return {\n    num,\n    type: ADD_NUMBER,\n  } as const;\n}\n\n/**\n * 게임을 완전히 초기화하는 액션을 반환합니다.\n */\nexport function resetGame() {\n  return {\n    type: RESET_GAME,\n  } as const;\n}\n","const COLOR = {\n  primary: '#fd0d5c',\n  primaryLight: '#ffd0df',\n  primaryLighter: '#ffe3ec',\n};\n\nexport default COLOR;\n","import COLOR from 'colors';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  margin: 0;\n  height: 35px;\n  border: 0;\n  border-radius: 5px;\n  padding: 8px 16px;\n  color: white;\n  background-color: ${COLOR.primary};\n  cursor: pointer;\n  transition: opacity ease-out 0.2s;\n\n  &:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Button from './Button';\n\ninterface AlertProps {\n  isVisible: boolean;\n  message: string;\n  onConfirm: React.MouseEventHandler<HTMLElement>;\n}\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nconst AlertContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: auto;\n  width: 500px;\n  height: 80px;\n  border-radius: 5px;\n  padding: 20px;\n  background-color: white;\n  transform: translate(-50%, -50%);\n`;\n\nconst alertPortal = document.getElementById('alert-portal');\nconst stopPropagation = (e: React.MouseEvent) => e.stopPropagation();\n\nexport default class Alert extends React.Component<AlertProps> {\n  el: HTMLElement|null = null;\n\n  constructor(props: AlertProps) {\n    super(props);\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.appendChild(this.el);\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.removeChild(this.el);\n    }\n  }\n\n  private renderAlert() {\n    const { isVisible, message, onConfirm } = this.props;\n\n    if (!isVisible) {\n      return null;\n    }\n\n    return (\n      <Overlay onClick={onConfirm}>\n        <AlertContainer onClick={stopPropagation}>\n          {message}\n          <Button\n            type=\"button\"\n            onClick={onConfirm}\n          >\n            확인\n          </Button>\n        </AlertContainer>\n      </Overlay>\n    );\n  }\n\n  public render() {\n    if (this.el === null) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      this.renderAlert(),\n      this.el,\n    );\n  }\n}\n","import React from 'react';\nimport { chunk as _chunk, map as _map, sample as _sample } from 'lodash';\nimport styled from 'styled-components';\nimport { PlayerData, BingoEntityData } from 'typing';\nimport { State } from 'reducers';\nimport { Dispatch } from 'redux';\nimport { addNumber } from 'actions';\nimport { connect } from 'react-redux';\nimport bind from 'bind-decorator';\nimport Alert from 'components/Alert';\nimport COLOR from 'colors';\n\ninterface PlayerPropsFromState {\n\n}\n\ninterface PlayerPropsFromDispatch {\n  onSelectNumber: (num: number) => any;\n}\n\ninterface PlayerProps extends PlayerPropsFromState, PlayerPropsFromDispatch {\n  isActive: boolean;\n  player: PlayerData;\n}\n\ninterface PlayerState {\n  isAlertVisible: boolean;\n}\n\nconst Container = styled.div<{disabled: boolean}>`\n  ${({ disabled }) => disabled && `\n    * {\n      opacity: 0.7;\n    }\n\n    td {\n      cursor: not-allowed;\n    }\n  `}\n`;\n\nconst PlayerName = styled.h2<{highlight: boolean}>`\n  margin-bottom: 10px;\n\n  ${({ highlight }) => highlight && `color: ${COLOR.primary};`}\n`;\n\nconst TableContainer = styled.div<{highlight: boolean}>`\n  border-radius: 5px;\n  overflow: hidden;\n  ${({ highlight }) => highlight && `border: solid 1px ${COLOR.primaryLight};`}\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n`;\n\nconst Td = styled.td<{selected: boolean, disabled: boolean}>`\n  width: 50px;\n  height: 50px;\n  border: solid 1px #eeeeee;\n  padding: 12px;\n  text-align: center;\n  transition: background-color ease-out 0.2s;\n\n  ${({ selected }) => selected && `color: ${COLOR.primary}` }\n  ${({ disabled }) => disabled ? 'cursor: not-allowed;' : `\n    cursor: pointer;\n\n    &:hover {\n      border: 0;\n      background-color: ${COLOR.primaryLighter};\n    }\n  `}\n`;\n\nconst CompleteCollectionContainer = styled.div`\n  margin-top: 30px;\n`;\n\nclass Player extends React.Component<PlayerProps, PlayerState> {\n  state: PlayerState = {\n    isAlertVisible: false,\n  };\n\n  /**\n   * 번호를 눌렀을 때 처리 함수를 만드는 함수\n   * @param num\n   */\n  private makeTdClickHandler(num: number) {\n    return () => {\n      this.props.onSelectNumber(num);\n    };\n  }\n\n  /**\n   * 잘못된 때에 번호를 눌렀을 때 처리 함수\n   */\n  @bind\n  private handleTdErrorClick() {\n    const { isActive, player } = this.props;\n    if (_sample(player.table) !== null && !isActive) {\n      this.setState({\n        isAlertVisible: true,\n      });\n    }\n  }\n\n  /**\n   * 알림을 확인했을 때 처리 함수\n   */\n  @bind\n  private handleAlertConfirm() {\n    this.setState({\n      isAlertVisible: false,\n    });\n  }\n\n  /**\n   * 보드판 행, 열을 렌더링합니다.\n   */\n  private renderTableRows() {\n    const { isActive, player } = this.props;\n\n    return _map(\n      _chunk(player.table, 5),\n      (row, rowIndex) => {\n        const entityList = _map(row, (entity, columnIndex) => {\n          const selectable = entity !== null && isActive && !entity.isSelected;\n          const onClickHandler = selectable\n            // HACK: selectable에 null 아닌거 들어가므로 보장됨\n            ? this.makeTdClickHandler((entity as BingoEntityData).key)\n            : this.handleTdErrorClick;\n\n          return (\n            <Td\n              key={`${rowIndex}-${columnIndex}`}\n              disabled={!selectable}\n              selected={entity !== null && entity.isSelected}\n              onClick={onClickHandler}\n            >\n              {entity !== null ? entity.key : ''}\n            </Td>\n          );\n        });\n\n        return (\n          <tr key={row.join('-') + rowIndex}>\n            {entityList}\n          </tr>\n        );\n      },\n    );\n  }\n\n  /**\n   * 빙고 맞춘 조합 목록을 렌더링합니다.\n   */\n  private renderMatchedCombinationList() {\n    const { table, matchedIndexList } = this.props.player;\n\n    return _map(\n      _map(\n        matchedIndexList,\n        combination => _map(combination, (index) => {\n          const entity = table[index];\n          return entity !== null ? entity.key : null;\n        }),\n      ),\n      (combination, index) => (\n        <div key={combination.join('-') + index}>\n          {combination.join(', ')}\n        </div>\n      ),\n    );\n  }\n\n  public render() {\n    const { player, isActive } = this.props;\n    const { isAlertVisible } = this.state;\n\n    return (\n      <Container disabled={!isActive}>\n        <PlayerName highlight={isActive}>\n          {player.name}\n        </PlayerName>\n\n        <TableContainer highlight={isActive}>\n          <Table>\n            <tbody>\n              {this.renderTableRows()}\n            </tbody>\n          </Table>\n        </TableContainer>\n\n        <CompleteCollectionContainer>\n          <div>빙고 조합</div>\n          <div>\n            {this.renderMatchedCombinationList()}\n          </div>\n        </CompleteCollectionContainer>\n\n        <Alert\n          isVisible={isAlertVisible}\n          message=\"잘못된 차례입니다.\"\n          onConfirm={this.handleAlertConfirm}\n        />\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: State): PlayerPropsFromState {\n  return {\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): PlayerPropsFromDispatch {\n  return {\n    onSelectNumber: num => dispatch(addNumber(num)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(Player);\n","import * as React from 'react';\nimport { State } from 'reducers';\nimport Alert from 'components/Alert';\nimport { Dispatch } from 'redux';\nimport { resetGame } from 'actions';\nimport { connect } from 'react-redux';\n\ninterface AlertWinnerPropsFromState {\n  isVisible: boolean;\n  winnerName: string|null; // null이면 승자가 없음\n}\n\ninterface AlertWinnerPropsFromDispatch {\n  onConfirm: () => any;\n}\n\ntype AlertWinnerProps = AlertWinnerPropsFromState & AlertWinnerPropsFromDispatch;\n\nconst AlertWinner: React.FunctionComponent<AlertWinnerProps> = ({ isVisible, winnerName, onConfirm }) => {\n  return (\n    <Alert\n      isVisible={isVisible}\n      message={winnerName === null ? '무승부입니다.' : `${winnerName} 승리입니다.`}\n      onConfirm={onConfirm}\n    />\n  );\n};\n\nfunction mapStateToProps(state: State): AlertWinnerPropsFromState {\n  const winners = state.players.filter(player => player.isWin);\n\n  if (winners.length === 0) {\n    return {\n      isVisible: false,\n      winnerName: null,\n    };\n  }\n\n  return {\n    isVisible: true,\n    winnerName: winners.length > 1 ? null : winners[0].name,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): AlertWinnerPropsFromDispatch {\n  return {\n    onConfirm: () => dispatch(resetGame()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(AlertWinner);\n","import React from 'react';\nimport { State } from 'reducers';\nimport { Dispatch } from 'redux';\nimport { startGame } from 'actions';\nimport { connect } from 'react-redux';\nimport Button from 'components/Button';\n\ninterface ButtonStartPropsFromState {\n  isGameStarted: boolean;\n\n}\ninterface ButtonStartPropsFromDispatch {\n  onClick: () => any;\n}\n\ntype ButtonStartProps = ButtonStartPropsFromState & ButtonStartPropsFromDispatch;\n\nconst ButtonStart: React.FunctionComponent<ButtonStartProps> = ({ isGameStarted, onClick }) => {\n  return (\n    <Button\n      type=\"button\"\n      onClick={onClick}\n    >\n      게임 {isGameStarted ? '재' : ''}시작\n    </Button>\n  );\n};\n\nfunction mapStateToProps(state: State): ButtonStartPropsFromState {\n  return {\n    isGameStarted: state.isGameStarted,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): ButtonStartPropsFromDispatch {\n  return {\n    onClick: () => dispatch(startGame()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(ButtonStart);\n","import React from 'react';\nimport Player from 'containers/Player';\nimport styled from 'styled-components';\nimport { State } from 'reducers';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { PlayerData } from 'typing';\nimport AlertWinner from 'containers/AlertWinner';\nimport ButtonStart from 'containers/ButtonStart';\n\ninterface AppPropsFromState {\n  currentPlayerIndex: number|null;\n  players: PlayerData[];\n}\n\ninterface AppPropsFromDispatch {\n}\n\ntype AppProps = AppPropsFromState & AppPropsFromDispatch;\n\nconst AppContainer = styled.div`\n  margin: 0 auto;\n  max-width: 800px;\n`;\n\nconst Header = styled.header`\n  margin-bottom: 30px;\n`;\n\nconst PlayerContainer = styled.main`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst App: React.FC<AppProps> = ({ currentPlayerIndex, players }) => {\n  const playerNodeList = players.map((player, index) => (\n    <Player\n      key={player.name}\n      player={player}\n      isActive={index === currentPlayerIndex}\n    />\n  ));\n\n  return (\n    <AppContainer>\n      <Header>\n        <h1>React + Redux = Bingo</h1>\n        <ButtonStart />\n      </Header>\n\n      <PlayerContainer>\n        {playerNodeList}\n      </PlayerContainer>\n\n      <AlertWinner />\n    </AppContainer>\n  );\n};\n\nfunction mapStateToProps(state: State): AppPropsFromState {\n  return {\n    currentPlayerIndex: state.currentPlayerIndex,\n    players: state.players,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): AppPropsFromDispatch {\n  return {\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport default GlobalStyle;\n","import { PlayerData, BingoEntityData, BingoTable } from 'typing';\nimport {\n  range as _range,\n  map as _map,\n  findIndex as _findIndex,\n  shuffle as _shuffle,\n  chunk as _chunk,\n  sample as _sample,\n  every as _every,\n} from 'lodash';\n\n/**\n * 수열을 만듧니다.\n * @param multiplier 차수\n * @param count 수열의 개수\n * @param offset 상수항\n */\nfunction makeSequence(multiplier: number, count: number, offset: number = 0): number[] {\n  return _map(_range(count), num => num * multiplier + offset);\n}\n\nconst BINGO_INDEX_COMBINATION = [\n  ..._chunk(_range(25), 5), // 가로줄\n  ..._map(_range(5), remainder => makeSequence(5, 5, remainder)), // 세로줄\n  makeSequence(6, 5), // 왼쪽 대각선\n  makeSequence(4, 5, 4), // 오른쪽 대각선\n];\n\n/**\n * 새로운 빙고판을 준비하는 함수\n */\nconst makeNewBingo = () => _map(_shuffle(_range(25)), num => ({\n  key: num + 1,\n  isSelected: false,\n}));\n\n/**\n * 새로운 플레이어 목록을 만드는 함수\n */\nexport function initializePlayers(): PlayerData[] {\n  return [\n    {\n      name: 'Player 1',\n      table: makeNewBingo(),\n      matchedIndexList: [],\n      isWin: false,\n    },\n    {\n      name: 'Player 2',\n      table: makeNewBingo(),\n      matchedIndexList: [],\n      isWin: false,\n    },\n  ];\n}\n\n/**\n * 주어진 목록에서 선택한 숫자를 selected로 마킹한 새로운 어레이를 반환합니다.\n * @param list\n * @param selected\n */\nfunction markNewSelected(\n  list: BingoTable,\n  selected: number,\n): BingoTable {\n  if (_sample(list) === null) {\n    return list;\n  }\n\n  return _map(list as BingoEntityData[], (entity) => { // HACK: entity가 null인 케이스 예외 처리 했다\n    if (entity !== null && entity.key === selected) {\n      return {\n        key: entity.key,\n        isSelected: true,\n      } as BingoEntityData;\n    }\n    return entity;\n  });\n}\n\n/**\n * 주어진 목록에서 선택한 숫자가 selected가 되었을 때 빙고가 이뤄진 조합의 목록을 반환한다.\n * 빙고 되는 index의 조합 목록에서 선택한 숫자의 index가 포함된 경우만 필터링하고, 해당 조합만 확인한다.\n * @param list\n * @param selectd\n */\nfunction makeMatchedIndexList(list: BingoTable, selected: number): number[][] {\n  if (_sample(list) === null) {\n    return [];\n  }\n\n  const targetList = list as BingoEntityData[];\n\n  const selectedIndex = _findIndex(targetList, entity => entity.key === selected);\n\n  return BINGO_INDEX_COMBINATION\n  .filter(value => value.includes(selectedIndex))\n  .filter(combination => _every(_map(combination, index => targetList[index].isSelected)));\n}\n\n/**\n * 선택한 숫자를 선택했다고 마킹한 Player 데이터를 반환합니다.\n * @param player\n * @param selected\n */\nexport function makeNewPlayerMapper(selected: number): (player: PlayerData) => PlayerData {\n  return (player) => {\n    const newTable = markNewSelected(player.table, selected);\n    const newMatchedIndexList = [\n      ...player.matchedIndexList,\n      ...makeMatchedIndexList(newTable, selected),\n    ];\n\n    return {\n      ...player,\n      table: newTable,\n      matchedIndexList: newMatchedIndexList,\n      isWin: newMatchedIndexList.length >= 5,\n    };\n  };\n}\n","import { Action, ADD_NUMBER, START_GAME, RESET_GAME } from './actions';\nimport { PlayerData } from './typing';\nimport {\n  fill as _fill,\n  map as _map,\n  some as _some,\n} from 'lodash';\nimport { initializePlayers, makeNewPlayerMapper } from './helpers';\n\nexport interface State {\n  isGameStarted: boolean;\n  currentPlayerIndex: number|null;\n  players: PlayerData[];\n}\n\nconst initialState: State = {\n  isGameStarted: false,\n  currentPlayerIndex: null,\n  players: [\n    {\n      name: 'Player 1',\n      table: _fill(Array(25), null),\n      matchedIndexList: [],\n      isWin: false,\n    },\n    {\n      name: 'Player 2',\n      table: _fill(Array(25), null),\n      matchedIndexList: [],\n      isWin: false,\n    },\n  ],\n};\n\nexport default function rootReducer(state: State = initialState, action: Action): State {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        isGameStarted: true,\n        currentPlayerIndex: 0,\n        players: initializePlayers(),\n      };\n\n    case ADD_NUMBER:\n      if (state.currentPlayerIndex === null) {\n        return {\n          ...state,\n          currentPlayerIndex: 0,\n        };\n      }\n\n      const nextPlayerIndex = state.currentPlayerIndex + 1 === state.players.length\n        ? 0\n        : state.currentPlayerIndex + 1;\n      const newPlayers = _map(state.players, makeNewPlayerMapper(action.num));\n\n      return {\n        ...state,\n        currentPlayerIndex: _some(newPlayers, player => player.isWin)\n          ? null\n          : nextPlayerIndex,\n        players: newPlayers,\n      };\n    case RESET_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport GlobalStyle from './components/GlobalStyle';\nimport rootReducer from './reducers';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any; // TODO\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}