{"version":3,"sources":["actions.ts","components/Alert.tsx","containers/Player/index.tsx","containers/App/index.tsx","serviceWorker.ts","components/GlobalStyle.ts","helpers.ts","reducers.ts","index.tsx"],"names":["START_GAME","RESET_GAME","ADD_NUMBER","Overlay","styled","div","_templateObject","AlertContainer","_templateObject2","alertPortal","document","getElementById","stopPropagation","e","Alert","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","el","createElement","appendChild","removeChild","_this$props","isVisible","message","onConfirm","react_default","a","onClick","type","ReactDOM","createPortal","renderAlert","React","Component","Container","Player_templateObject","_ref","disabled","PlayerName","h2","Player_templateObject2","_ref2","highlight","TableContainer","_templateObject3","_ref3","Table","table","_templateObject4","Td","td","_templateObject5","_ref4","selected","_ref5","CompleteCollectionContainer","_templateObject6","Player","state","isAlertVisible","num","_this2","onSelectNumber","isActive","player","_sample","setState","_this3","_this$props2","_map","_chunk","row","rowIndex","entityList","entity","columnIndex","selectable","isSelected","onClickHandler","makeTdClickHandler","key","handleTdErrorClick","react","concat","join","_this$props$player","matchedIndexList","combination","index","_this$props3","name","renderTableRows","renderMatchedCombinationList","Alert_Alert","handleAlertConfirm","bind","withConnect","connect","dispatch","addNumber","AppContainer","App_templateObject","Header","header","App_templateObject2","PlayerContainer","main","App_templateObject3","makeAlertMessage","winners","length","currentPlayerIndex","players","onStart","onReset","isNew","playerNodeList","map","containers_Player","filter","isWin","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","makeSequence","multiplier","count","offset","arguments","undefined","_range","BINGO_INDEX_COMBINATION","toConsumableArray","remainder","makeNewBingo","_shuffle","initializePlayers","makeNewPlayerMapper","newTable","list","markNewSelected","newMatchedIndexList","targetList","selectedIndex","_findIndex","value","includes","_every","makeMatchedIndexList","objectSpread","initialState","_fill","Array","store","createStore","action","nextPlayerIndex","newPlayers","_some","__REDUX_DEVTOOLS_EXTENSION__","render","es","components_GlobalStyle","containers_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2280d1e1.chunk.js","sourcesContent":["export const START_GAME = 'START_GAME';\nexport const RESET_GAME = 'RESET_GAME';\nexport const ADD_NUMBER = 'ADD_NUMBER';\n\nexport type Action = ReturnType<\n  typeof startGame |\n  typeof resetGame |\n  typeof addNumber\n>;\n\n/**\n * 새 게임을 시작하는 액션을 반환합니다.\n */\nexport function startGame() {\n  return {\n    type: START_GAME,\n  } as const;\n}\n\n/**\n * 다시 게임을 시작하는 액션을 반환합니다.ㄴ\n */\nexport function resetGame() {\n  return {\n    type: RESET_GAME,\n  } as const;\n}\n\n/**\n * 숫자를 더하는 액션을 반환합니다.\n * @param num\n */\nexport function addNumber(num: number) {\n  return {\n    num,\n    type: ADD_NUMBER,\n  } as const;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\n\ninterface AlertProps {\n  isVisible: boolean;\n  message: string;\n  onConfirm: React.MouseEventHandler<HTMLElement>;\n}\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nconst AlertContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: auto;\n  width: 500px;\n  height: 80px;\n  border-radius: 5px;\n  padding: 20px;\n  background-color: white;\n  transform: translate(-50%, -50%);\n`;\n\nconst alertPortal = document.getElementById('alert-portal');\nconst stopPropagation = (e: React.MouseEvent) => e.stopPropagation();\n\nexport default class Alert extends React.Component<AlertProps> {\n  el: HTMLElement|null = null;\n\n  constructor(props: AlertProps) {\n    super(props);\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.appendChild(this.el);\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.removeChild(this.el);\n    }\n  }\n\n  private renderAlert() {\n    const { isVisible, message, onConfirm } = this.props;\n\n    if (!isVisible) {\n      return null;\n    }\n\n    return (\n      <Overlay onClick={onConfirm}>\n        <AlertContainer onClick={stopPropagation}>\n          {message}\n          <button\n            type=\"button\"\n            onClick={onConfirm}\n          >\n            확인\n          </button>\n        </AlertContainer>\n      </Overlay>\n    );\n  }\n\n  public render() {\n    if (this.el === null) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      this.renderAlert(),\n      this.el,\n    );\n  }\n}\n","import * as React from 'react';\nimport { chunk as _chunk, map as _map, sample as _sample } from 'lodash';\nimport styled from 'styled-components';\nimport { PlayerData, BingoEntityData } from 'typing';\nimport { State } from 'reducers';\nimport { Dispatch } from 'redux';\nimport { addNumber } from 'actions';\nimport { connect } from 'react-redux';\nimport bind from 'bind-decorator';\nimport Alert from 'components/Alert';\n\ninterface PlayerPropsFromState {\n\n}\n\ninterface PlayerPropsFromDispatch {\n  onSelectNumber: (num: number) => any;\n}\n\ninterface PlayerProps extends PlayerPropsFromState, PlayerPropsFromDispatch {\n  isActive: boolean;\n  player: PlayerData;\n}\n\ninterface PlayerState {\n  isAlertVisible: boolean;\n}\n\nconst Container = styled.div<{disabled: boolean}>`\n  ${({ disabled }) => disabled && `\n    * {\n      opacity: 0.7;\n    }\n\n    td {\n      cursor: not-allowed;\n    }\n  `}\n`;\n\nconst PlayerName = styled.h2<{highlight: boolean}>`\n  margin-bottom: 10px;\n\n  ${({ highlight }) => highlight && 'color: #fd0d5c;'}\n`;\n\nconst TableContainer = styled.div<{highlight: boolean}>`\n  border-radius: 5px;\n  overflow: hidden;\n  ${({ highlight }) => highlight && 'border: solid 1px #ffd0df;'}\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n`;\n\nconst Td = styled.td<{selected: boolean, disabled: boolean}>`\n  width: 50px;\n  height: 50px;\n  border: solid 1px #eeeeee;\n  padding: 12px;\n  text-align: center;\n  transition: background-color ease-out 0.2s;\n\n  ${({ selected }) => selected && 'color: #fd0d5c' }\n  ${({ disabled }) => disabled ? 'cursor: not-allowed;' : `\n    cursor: pointer;\n\n    &:hover {\n      border: 0;\n      background-color: #ffe3ec;\n    }\n  `}\n`;\n\nconst CompleteCollectionContainer = styled.div`\n  margin-top: 30px;\n`;\n\nclass Player extends React.Component<PlayerProps, PlayerState> {\n  state: PlayerState = {\n    isAlertVisible: false,\n  };\n\n  /**\n   * 번호를 눌렀을 때 처리 함수를 만드는 함수\n   * @param num\n   */\n  private makeTdClickHandler(num: number) {\n    return () => {\n      this.props.onSelectNumber(num);\n    };\n  }\n\n  /**\n   * 잘못된 때에 번호를 눌렀을 때 처리 함수\n   */\n  @bind\n  private handleTdErrorClick() {\n    const { isActive, player } = this.props;\n    if (_sample(player.table) !== null && !isActive) {\n      this.setState({\n        isAlertVisible: true,\n      });\n    }\n  }\n\n  /**\n   * 알림을 확인했을 때 처리 함수\n   */\n  @bind\n  private handleAlertConfirm() {\n    this.setState({\n      isAlertVisible: false,\n    });\n  }\n\n  /**\n   * 보드판 행, 열을 렌더링합니다.\n   */\n  private renderTableRows() {\n    const { isActive, player } = this.props;\n\n    return _map(\n      _chunk(player.table, 5),\n      (row, rowIndex) => {\n        const entityList = _map(row, (entity, columnIndex) => {\n          const selectable = entity !== null && isActive && !entity.isSelected;\n          const onClickHandler = selectable\n            // HACK: selectable에 null 아닌거 들어가므로 보장됨\n            ? this.makeTdClickHandler((entity as BingoEntityData).key)\n            : this.handleTdErrorClick;\n\n          return (\n            <Td\n              key={`${rowIndex}-${columnIndex}`}\n              disabled={!selectable}\n              selected={entity !== null && entity.isSelected}\n              onClick={onClickHandler}\n            >\n              {entity !== null ? entity.key : ''}\n            </Td>\n          );\n        });\n\n        return (\n          <tr key={row.join('-') + rowIndex}>\n            {entityList}\n          </tr>\n        );\n      },\n    );\n  }\n\n  /**\n   * 빙고 맞춘 조합 목록을 렌더링합니다.\n   */\n  private renderMatchedCombinationList() {\n    const { table, matchedIndexList } = this.props.player;\n\n    return _map(\n      _map(\n        matchedIndexList,\n        combination => _map(combination, (index) => {\n          const entity = table[index];\n          return entity !== null ? entity.key : null;\n        }),\n      ),\n      (combination, index) => (\n        <div key={combination.join('-') + index}>\n          {combination.join(', ')}\n        </div>\n      ),\n    );\n  }\n\n  public render() {\n    const { player, isActive } = this.props;\n    const { isAlertVisible } = this.state;\n\n    return (\n      <Container disabled={!isActive}>\n        <PlayerName highlight={isActive}>\n          {player.name}\n        </PlayerName>\n\n        <TableContainer highlight={isActive}>\n          <Table>\n            <tbody>\n              {this.renderTableRows()}\n            </tbody>\n          </Table>\n        </TableContainer>\n\n        <CompleteCollectionContainer>\n          <div>빙고 조합</div>\n          <div>\n            {this.renderMatchedCombinationList()}\n          </div>\n        </CompleteCollectionContainer>\n\n        <Alert\n          isVisible={isAlertVisible}\n          message=\"잘못된 차례입니다.\"\n          onConfirm={this.handleAlertConfirm}\n        />\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: State): PlayerPropsFromState {\n  return {\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): PlayerPropsFromDispatch {\n  return {\n    onSelectNumber: num => dispatch(addNumber(num)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(Player);\n","import React from 'react';\nimport Player from 'containers/Player';\nimport styled from 'styled-components';\nimport { State } from 'reducers';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { startGame, resetGame } from 'actions';\nimport { PlayerData } from 'typing';\nimport Alert from 'components/Alert';\n\ninterface AppPropsFromState {\n  currentPlayerIndex: number|null;\n  players: PlayerData[];\n}\n\ninterface AppPropsFromDispatch {\n  onStart: () => any;\n  onReset: () => any;\n}\n\ntype AppProps = AppPropsFromState & AppPropsFromDispatch;\n\nconst AppContainer = styled.div`\n  margin: 0 auto;\n  max-width: 800px;\n`;\n\nconst Header = styled.header`\n  margin-bottom: 30px;\n`;\n\nconst PlayerContainer = styled.main`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction makeAlertMessage(winners: PlayerData[]): string {\n  if (winners.length === 0) {\n    return '';\n  }\n\n  return winners.length > 1 ? '무승부입니다.' : `${winners[0].name} 승리입니다.`;\n}\n\nconst App: React.FC<AppProps> = ({ currentPlayerIndex, players, onStart, onReset }) => {\n  const isNew = currentPlayerIndex === null;\n  const playerNodeList = players.map((player, index) => (\n    <Player\n      key={player.name}\n      player={player}\n      isActive={index === currentPlayerIndex}\n    />\n  ));\n  const winners = players.filter(player => player.isWin);\n\n  return (\n    <AppContainer>\n      <Header>\n        <h1>React + Redux = Bingo</h1>\n        <button\n          type=\"button\"\n          onClick={isNew ? onStart : onReset}\n        >\n          게임 {isNew ? '' : '재'}시작\n        </button>\n      </Header>\n\n      <PlayerContainer>\n        {playerNodeList}\n      </PlayerContainer>\n\n      <Alert\n        isVisible={winners.length > 0}\n        message={makeAlertMessage(winners)}\n        onConfirm={onReset}\n      />\n    </AppContainer>\n  );\n};\n\nfunction mapStateToProps(state: State): AppPropsFromState {\n  return {\n    currentPlayerIndex: state.currentPlayerIndex,\n    players: state.players,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): AppPropsFromDispatch {\n  return {\n    onStart: () => dispatch(startGame()),\n    onReset: () => dispatch(resetGame()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport default GlobalStyle;\n","import { PlayerData, BingoEntityData, BingoTable } from 'typing';\nimport {\n  range as _range,\n  map as _map,\n  findIndex as _findIndex,\n  shuffle as _shuffle,\n  chunk as _chunk,\n  sample as _sample,\n  every as _every,\n} from 'lodash';\n\n/**\n * 수열을 만듧니다.\n * @param multiplier 차수\n * @param count 수열의 개수\n * @param offset 상수항\n */\nfunction makeSequence(multiplier: number, count: number, offset: number = 0): number[] {\n  return _map(_range(count), num => num * multiplier + offset);\n}\n\nconst BINGO_INDEX_COMBINATION = [\n  ..._chunk(_range(25), 5), // 가로줄\n  ..._map(_range(5), remainder => makeSequence(5, 5, remainder)), // 세로줄\n  makeSequence(6, 5), // 왼쪽 대각선\n  makeSequence(4, 5, 4), // 오른쪽 대각선\n];\n\n/**\n * 새로운 빙고판을 준비하는 함수\n */\nconst makeNewBingo = () => _map(_shuffle(_range(25)), num => ({\n  key: num + 1,\n  isSelected: false,\n}));\n\n/**\n * 새로운 플레이어 목록을 만드는 함수\n */\nexport function initializePlayers(): PlayerData[] {\n  return [\n    {\n      name: 'Player 1',\n      table: makeNewBingo(),\n      matchedIndexList: [],\n      isWin: false,\n    },\n    {\n      name: 'Player 2',\n      table: makeNewBingo(),\n      matchedIndexList: [],\n      isWin: false,\n    },\n  ];\n}\n\n/**\n * 주어진 목록에서 선택한 숫자를 selected로 마킹한 새로운 어레이를 반환합니다.\n * @param list\n * @param selected\n */\nfunction markNewSelected(\n  list: BingoTable,\n  selected: number,\n): BingoTable {\n  if (_sample(list) === null) {\n    return list;\n  }\n\n  return _map(list as BingoEntityData[], (entity) => { // HACK: entity가 null인 케이스 예외 처리 했다\n    if (entity !== null && entity.key === selected) {\n      return {\n        key: entity.key,\n        isSelected: true,\n      } as BingoEntityData;\n    }\n    return entity;\n  });\n}\n\n/**\n * 주어진 목록에서 선택한 숫자가 selected가 되었을 때 빙고가 이뤄진 조합의 목록을 반환한다.\n * 빙고 되는 index의 조합 목록에서 선택한 숫자의 index가 포함된 경우만 필터링하고, 해당 조합만 확인한다.\n * @param list\n * @param selectd\n */\nfunction makeMatchedIndexList(list: BingoTable, selected: number): number[][] {\n  if (_sample(list) === null) {\n    return [];\n  }\n\n  const targetList = list as BingoEntityData[];\n\n  const selectedIndex = _findIndex(targetList, entity => entity.key === selected);\n\n  return BINGO_INDEX_COMBINATION\n  .filter(value => value.includes(selectedIndex))\n  .filter(combination => _every(_map(combination, index => targetList[index].isSelected)));\n}\n\n/**\n * 선택한 숫자를 선택했다고 마킹한 Player 데이터를 반환합니다.\n * @param player\n * @param selected\n */\nexport function makeNewPlayerMapper(selected: number): (player: PlayerData) => PlayerData {\n  return (player) => {\n    const newTable = markNewSelected(player.table, selected);\n    const newMatchedIndexList = [\n      ...player.matchedIndexList,\n      ...makeMatchedIndexList(newTable, selected),\n    ];\n\n    return {\n      ...player,\n      table: newTable,\n      matchedIndexList: newMatchedIndexList,\n      isWin: newMatchedIndexList.length >= 5,\n    };\n  };\n}\n","import { Action, ADD_NUMBER, START_GAME, RESET_GAME } from './actions';\nimport { PlayerData } from './typing';\nimport {\n  fill as _fill,\n  map as _map,\n  some as _some,\n} from 'lodash';\nimport { initializePlayers, makeNewPlayerMapper } from './helpers';\n\nexport interface State {\n  currentPlayerIndex: number|null;\n  players: PlayerData[];\n}\n\nconst initialState: State = {\n  currentPlayerIndex: null,\n  players: [\n    {\n      name: 'Player 1',\n      table: _fill(Array(25), null),\n      matchedIndexList: [],\n      isWin: false,\n    },\n    {\n      name: 'Player 2',\n      table: _fill(Array(25), null),\n      matchedIndexList: [],\n      isWin: false,\n    },\n  ],\n};\n\nexport default function rootReducer(state: State = initialState, action: Action): State {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        currentPlayerIndex: 0,\n        players: initializePlayers(),\n      };\n\n    case RESET_GAME:\n      return {\n        ...initialState,\n        currentPlayerIndex: 0,\n        players: initializePlayers(),\n      };\n\n    case ADD_NUMBER:\n      if (state.currentPlayerIndex === null) {\n        return {\n          ...state,\n          currentPlayerIndex: 0,\n        };\n      }\n\n      const nextPlayerIndex = state.currentPlayerIndex + 1 === state.players.length\n        ? 0\n        : state.currentPlayerIndex + 1;\n      const newPlayers = _map(state.players, makeNewPlayerMapper(action.num));\n\n      return {\n        ...state,\n        currentPlayerIndex: _some(newPlayers, player => player.isWin)\n          ? null\n          : nextPlayerIndex,\n        players: newPlayers,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport GlobalStyle from './components/GlobalStyle';\nimport rootReducer from './reducers';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any; // TODO\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}