{"version":3,"sources":["colors.ts","components/Button.ts","components/Alert.tsx","store/gameStatus/actions.ts","containers/Player/index.tsx","store/players/actions.ts","store/players/reducer.ts","store/gameStatus/selectors.ts","helpers.ts","store/matchedCombination/actions.ts","store/matchedCombination/reducer.ts","store/matchedCombination/selectors.ts","store/players/selectors.ts","containers/WinnerAlert/index.tsx","containers/StartButton/index.tsx","containers/App/index.tsx","serviceWorker.ts","components/GlobalStyle.ts","store/gameStatus/reducer.ts","store/reducer.ts","store/gameStatus/saga.ts","store/matchedCombination/saga.ts","store/rootSaga.ts","store/index.ts","index.tsx"],"names":["COLOR","primary","primaryLight","primaryLighter","Button","styled","button","_templateObject","Overlay","div","Alert_templateObject","AlertContainer","_templateObject2","alertPortal","document","getElementById","stopPropagation","e","Alert","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","el","createElement","appendChild","removeChild","_this$props","isVisible","message","onConfirm","react_default","a","onClick","components_Button","type","ReactDOM","createPortal","renderAlert","React","Component","START_GAME","RESET_GAME","UPDATE_CURRENT_PLAYER_ID","SELECT_NUMBER","updateCurrentPlayerId","id","Container","Player_templateObject","_ref","disabled","PlayerName","h2","Player_templateObject2","_ref2","highlight","concat","TableContainer","_templateObject3","_ref3","Table","table","_templateObject4","Td","td","_templateObject5","_ref4","selected","_ref5","CompleteCollectionContainer","_templateObject6","Player","state","isAlertVisible","num","_this2","onSelectNumber","isActive","_sample","setState","_this3","_this$props2","_map","_chunk","row","rowIndex","entityList","entity","columnIndex","key","selectable","isSelected","onClickHandler","makeTdClickHandler","handleTdErrorClick","join","_this$props3","matchedIndexList","combination","index","_this$props4","name","renderTableRows","renderMatchedCombinationList","Alert_Alert","handleAlertConfirm","bind","withConnect","connect","dispatch","selectNumber","ADD_PLAYER","RESET_PLAYERS","addPlayer","initialPlayersState","byIds","allIds","selectGameStatusState","gameStatus","selectSelectedNumbers","createSelector","selectedNumbers","makeSelectCurrentPlayerId","currentPlayerId","makeSequence","multiplier","count","offset","arguments","length","undefined","_range","BINGO_INDEX_COMBINATION","toConsumableArray","remainder","makeNewTable","_shuffle","UPDATE_MATCHED_COMBINATION","ADD_MATCHED_COMBINATION","RESET_MATCHED_COMBINATION","addMatchedCombination","playerId","resetMatchedCombination","initialMatchedCombinationState","selectMatchedCombinationById","matchedCombination","selectPlayersState","players","selectByIds","selectAllIds","selectWinners","combinations","_filter","player","makeSelectPlayerTable","makeSelectPlayer","mapStateToProps","createStructuredSelector","winners","winnerName","react","isGameStarted","AppContainer","App_templateObject","Header","header","App_templateObject2","PlayerContainer","main","App_templateObject3","playersPlaceholder","Array","fill","tablePlaceholder","numbers","map","value","includes","playerNodeList","containers_Player","containers_StartButton","containers_WinnerAlert","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","initialState","reducers","action","objectSpread","defineProperty","newId","Number","_last","toString","rootReducer","combineReducers","startGameSaga","selectNumberSaga","resetGameSaga","gameStatusSaga","regenerator_default","wrap","_context","prev","next","put","stop","_marked","currentIndex","_context2","select","sent","findIndex","selectedNumber","_marked2","_context3","_marked3","_context4","takeLatest","takeEvery","_marked4","updateMatchedCombinationSaga","matchedCombinationSaga","all","filter","_every","saga_marked","saga_marked2","rootSaga","rootSaga_marked","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","composeWithDevTools","applyMiddleware","apply","run","render","es","components_GlobalStyle","containers_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.296fe41d.chunk.js","sourcesContent":["const COLOR = {\n  primary: '#fd0d5c',\n  primaryLight: '#ffd0df',\n  primaryLighter: '#ffe3ec',\n};\n\nexport default COLOR;\n","import COLOR from 'colors';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  margin: 0;\n  height: 35px;\n  border: 0;\n  border-radius: 5px;\n  padding: 8px 16px;\n  color: white;\n  background-color: ${COLOR.primary};\n  cursor: pointer;\n  transition: opacity ease-out 0.2s;\n\n  &:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Button from './Button';\n\ninterface AlertProps {\n  isVisible: boolean;\n  message: string;\n  onConfirm: React.MouseEventHandler<HTMLElement>;\n}\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nconst AlertContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: auto;\n  width: 500px;\n  height: 80px;\n  border-radius: 5px;\n  padding: 20px;\n  background-color: white;\n  transform: translate(-50%, -50%);\n`;\n\nconst alertPortal = document.getElementById('alert-portal');\nconst stopPropagation = (e: React.MouseEvent) => e.stopPropagation();\n\nexport default class Alert extends React.Component<AlertProps> {\n  el: HTMLElement|null = null;\n\n  constructor(props: AlertProps) {\n    super(props);\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.appendChild(this.el);\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (alertPortal !== null && this.el !== null) {\n      alertPortal.removeChild(this.el);\n    }\n  }\n\n  private renderAlert() {\n    const { isVisible, message, onConfirm } = this.props;\n\n    if (!isVisible) {\n      return null;\n    }\n\n    return (\n      <Overlay onClick={onConfirm}>\n        <AlertContainer onClick={stopPropagation}>\n          {message}\n          <Button\n            type=\"button\"\n            onClick={onConfirm}\n          >\n            확인\n          </Button>\n        </AlertContainer>\n      </Overlay>\n    );\n  }\n\n  public render() {\n    if (this.el === null) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      this.renderAlert(),\n      this.el,\n    );\n  }\n}\n","export type GameStatusAction = ReturnType<\n  typeof startGame |\n  typeof resetGame |\n  typeof updateCurrentPlayerId |\n  typeof selectNumber\n>;\n\nexport const START_GAME = 'START_GAME';\nexport const RESET_GAME = 'RESET_GAME';\nexport const UPDATE_CURRENT_PLAYER_ID = 'UPDATE_CURRENT_PLAYER_ID';\nexport const SELECT_NUMBER = 'SELECT_NUMBER';\n\nexport function startGame() {\n  return {\n    type: START_GAME,\n  } as const;\n}\n\nexport function resetGame() {\n  return {\n    type: RESET_GAME,\n  } as const;\n}\n\nexport function updateCurrentPlayerId(id: string) {\n  return {\n    id,\n    type: UPDATE_CURRENT_PLAYER_ID,\n  } as const;\n}\n\nexport function selectNumber(num: number) {\n  return {\n    num,\n    type: SELECT_NUMBER,\n  } as const;\n}\n","import React from 'react';\nimport { chunk as _chunk, map as _map, sample as _sample } from 'lodash';\nimport styled from 'styled-components';\nimport { BingoTable } from 'typing';\nimport { RootState } from 'store/reducer';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport bind from 'bind-decorator';\nimport Alert from 'components/Alert';\nimport COLOR from 'colors';\nimport { selectNumber } from 'store/gameStatus/actions';\n\ninterface PlayerPropsFromState {\n\n}\n\ninterface PlayerPropsFromDispatch {\n  onSelectNumber: (num: number) => any;\n}\n\ninterface PlayerProps extends PlayerPropsFromState, PlayerPropsFromDispatch {\n  isActive: boolean;\n  name: string;\n  table: BingoTable|null[];\n  matchedIndexList: number[][];\n}\n\ninterface PlayerState {\n  isAlertVisible: boolean;\n}\n\nconst Container = styled.div<{disabled: boolean}>`\n  ${({ disabled }) => disabled && `\n    * {\n      opacity: 0.7;\n    }\n\n    td {\n      cursor: not-allowed;\n    }\n  `}\n`;\n\nconst PlayerName = styled.h2<{highlight: boolean}>`\n  margin-bottom: 10px;\n\n  ${({ highlight }) => highlight && `color: ${COLOR.primary};`}\n`;\n\nconst TableContainer = styled.div<{highlight: boolean}>`\n  border-radius: 5px;\n  overflow: hidden;\n  ${({ highlight }) => highlight && `border: solid 1px ${COLOR.primaryLight};`}\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n`;\n\nconst Td = styled.td<{selected: boolean, disabled: boolean}>`\n  width: 50px;\n  height: 50px;\n  border: solid 1px #eeeeee;\n  padding: 12px;\n  text-align: center;\n  transition: background-color ease-out 0.2s;\n\n  ${({ selected }) => selected && `color: ${COLOR.primary}` }\n  ${({ disabled }) => disabled ? 'cursor: not-allowed;' : `\n    cursor: pointer;\n\n    &:hover {\n      border: 0;\n      background-color: ${COLOR.primaryLighter};\n    }\n  `}\n`;\n\nconst CompleteCollectionContainer = styled.div`\n  margin-top: 30px;\n`;\n\nclass Player extends React.Component<PlayerProps, PlayerState> {\n  state: PlayerState = {\n    isAlertVisible: false,\n  };\n\n  /**\n   * 번호를 눌렀을 때 처리 함수를 만드는 함수\n   * @param num\n   */\n  private makeTdClickHandler(num: number) {\n    return () => {\n      this.props.onSelectNumber(num);\n    };\n  }\n\n  /**\n   * 잘못된 때에 번호를 눌렀을 때 처리 함수\n   */\n  @bind\n  private handleTdErrorClick() {\n    const { isActive, table } = this.props;\n    if (_sample(table) !== null && !isActive) {\n      this.setState({\n        isAlertVisible: true,\n      });\n    }\n  }\n\n  /**\n   * 알림을 확인했을 때 처리 함수\n   */\n  @bind\n  private handleAlertConfirm() {\n    this.setState({\n      isAlertVisible: false,\n    });\n  }\n\n  /**\n   * 보드판 행, 열을 렌더링합니다.\n   */\n  private renderTableRows() {\n    const { isActive, table } = this.props;\n\n    return _map(\n      _chunk(table, 5),\n      (row, rowIndex) => {\n        const entityList = _map(row, (entity, columnIndex) => {\n          if (entity === null) {\n            return (\n              <Td\n                key={`${rowIndex}-${columnIndex}`}\n                disabled={true}\n                selected={false}\n              />\n            );\n          }\n\n          const selectable = isActive && !entity.isSelected;\n          const onClickHandler = selectable\n            ? this.makeTdClickHandler(entity.key)\n            : this.handleTdErrorClick;\n\n          return (\n            <Td\n              key={`${rowIndex}-${columnIndex}`}\n              disabled={!selectable}\n              selected={entity.isSelected}\n              onClick={onClickHandler}\n            >\n              {entity.key}\n            </Td>\n          );\n        });\n\n        return (\n          <tr key={row.join('-') + rowIndex}>\n            {entityList}\n          </tr>\n        );\n      },\n    );\n  }\n\n  /**\n   * 빙고 맞춘 조합 목록을 렌더링합니다.\n   */\n  private renderMatchedCombinationList() {\n    const { table, matchedIndexList } = this.props;\n\n    return _map(\n      _map(\n        matchedIndexList,\n        combination => _map(combination, (index) => {\n          const entity = table[index];\n          return entity !== null ? entity.key : null;\n        }),\n      ),\n      (combination, index) => (\n        <div key={combination.join('-') + index}>\n          {combination.join(', ')}\n        </div>\n      ),\n    );\n  }\n\n  public render() {\n    const { isActive, name } = this.props;\n    const { isAlertVisible } = this.state;\n\n    return (\n      <Container disabled={!isActive}>\n        <PlayerName highlight={isActive}>\n          {name}\n        </PlayerName>\n\n        <TableContainer highlight={isActive}>\n          <Table>\n            <tbody>\n              {this.renderTableRows()}\n            </tbody>\n          </Table>\n        </TableContainer>\n\n        <CompleteCollectionContainer>\n          <div>빙고 조합</div>\n          <div>\n            {this.renderMatchedCombinationList()}\n          </div>\n        </CompleteCollectionContainer>\n\n        <Alert\n          isVisible={isAlertVisible}\n          message=\"잘못된 차례입니다.\"\n          onConfirm={this.handleAlertConfirm}\n        />\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: RootState): PlayerPropsFromState {\n  return {\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): PlayerPropsFromDispatch {\n  return {\n    onSelectNumber: num => dispatch(selectNumber(num)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(Player);\n","export type PlayersAction = ReturnType<\n  typeof addPlayer |\n  typeof resetPlayers\n>;\n\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const RESET_PLAYERS = 'RESET_PLAYERS';\n\nexport function addPlayer(id: string, name: string, table: number[]) {\n  return {\n    id,\n    name,\n    table,\n    type: ADD_PLAYER,\n  } as const;\n}\n\nexport function resetPlayers() {\n  return {\n    type: RESET_PLAYERS,\n  } as const;\n}\n","import { PlayersAction, ADD_PLAYER, RESET_PLAYERS } from './actions';\nimport { PlayersState } from './reducer';\n\nexport interface PlayerStateValue {\n  id: string;\n  name: string;\n  table: number[];\n}\n\nexport interface PlayersState {\n  byIds: {\n    [id: string]: PlayerStateValue;\n  };\n  allIds: string[];\n}\n\nexport const initialPlayersState: PlayersState = {\n  byIds: {},\n  allIds: [],\n};\n\nexport default function playersReducer(state: PlayersState = initialPlayersState, action: PlayersAction): PlayersState {\n  switch (action.type) {\n    case ADD_PLAYER:\n      return {\n        ...state,\n        byIds: {\n          ...state.byIds,\n          [action.id]: {\n            id: action.id,\n            name: action.name,\n            table: action.table,\n          },\n        },\n        allIds: [...state.allIds, action.id],\n      };\n    case RESET_PLAYERS:\n      return initialPlayersState;\n\n    default:\n      return state;\n  }\n}\n","import { RootState } from '../reducer';\nimport { GameStatusState } from './reducer';\nimport { createSelector } from 'reselect';\n\nfunction selectGameStatusState(state: RootState): GameStatusState {\n  return state.gameStatus;\n}\n\nconst selectSelectedNumbers = createSelector(selectGameStatusState, state => state.selectedNumbers);\n\nconst makeSelectCurrentPlayerId = () => createSelector(selectGameStatusState, state => state.currentPlayerId);\n\nconst makeSelectIsGameStarted = () => createSelector(makeSelectCurrentPlayerId(), currentPlayerId => currentPlayerId !== null);\n\nexport {\n  selectGameStatusState,\n  selectSelectedNumbers,\n\n  makeSelectIsGameStarted,\n  makeSelectCurrentPlayerId,\n};\n","import { BingoTable } from 'typing';\nimport {\n  range as _range,\n  map as _map,\n  shuffle as _shuffle,\n  chunk as _chunk,\n} from 'lodash';\n\n/**\n * 수열을 만듧니다.\n * @param multiplier 차수\n * @param count 수열의 개수\n * @param offset 상수항\n */\nfunction makeSequence(multiplier: number, count: number, offset: number = 0): number[] {\n  return _map(_range(count), num => num * multiplier + offset);\n}\n\nexport const BINGO_INDEX_COMBINATION = [\n  ..._chunk(_range(25), 5), // 가로줄\n  ..._map(_range(5), remainder => makeSequence(5, 5, remainder)), // 세로줄\n  makeSequence(6, 5), // 왼쪽 대각선\n  makeSequence(4, 5, 4), // 오른쪽 대각선\n];\n\n/**\n * 새로운 빙고판을 준비하는 함수\n */\nexport const makeNewTable = () => _map(_shuffle(_range(25)), num => num + 1);\n\nexport function makeBingoTable(table: number[], selectedNumbers: number[]): BingoTable {\n  return table.map(value => ({\n    key: value,\n    isSelected: selectedNumbers.includes(value),\n  }));\n}\n","export type MatchedCombinationAction = ReturnType<\n  typeof updateMatchedCombination |\n  typeof addMatchedCombination |\n  typeof resetMatchedCombination\n>;\n\nexport const UPDATE_MATCHED_COMBINATION = 'UPDATE_MATCHED_COMBINATION';\nexport const ADD_MATCHED_COMBINATION = 'ADD_MATCHED_COMBINATION';\nexport const RESET_MATCHED_COMBINATION = 'RESET_MATCHED_COMBINATION';\n\nexport function updateMatchedCombination(playerId: string, selectedNumber: number) {\n  return {\n    playerId,\n    selectedNumber,\n    type: UPDATE_MATCHED_COMBINATION,\n  } as const;\n}\n\nexport function addMatchedCombination(playerId: string, combination: number[]) {\n  return {\n    playerId,\n    combination,\n    type: ADD_MATCHED_COMBINATION,\n  } as const;\n}\n\nexport function resetMatchedCombination() {\n  return {\n    type: RESET_MATCHED_COMBINATION,\n  } as const;\n}\n","import { MatchedCombinationAction, ADD_MATCHED_COMBINATION, RESET_MATCHED_COMBINATION } from './actions';\nimport { last as _last } from 'lodash';\n\ninterface MatchedCombinationValue {\n  id: string;\n  playerId: string;\n  combination: number[];\n}\n\nexport interface MatchedCombinationState {\n  byIds: {\n    [id: string]: MatchedCombinationValue,\n  };\n  allIds: string[];\n}\n\nexport const initialMatchedCombinationState = {\n  byIds: {},\n  allIds: [],\n};\n\nexport default function matchedCombinationReducer(state: MatchedCombinationState = initialMatchedCombinationState, action: MatchedCombinationAction): MatchedCombinationState {\n  switch (action.type) {\n    case ADD_MATCHED_COMBINATION:\n      const newId = (Number(_last(state.allIds) || '0') + 1).toString();\n\n      return {\n        byIds: {\n          ...state.byIds,\n          [newId]: {\n            id: newId,\n            playerId: action.playerId,\n            combination: action.combination,\n          },\n        },\n        allIds: [\n          ...state.allIds,\n          newId,\n        ],\n      };\n    case RESET_MATCHED_COMBINATION:\n      return initialMatchedCombinationState;\n    default:\n      return state;\n  }\n}\n","import { RootState } from 'store/reducer';\nimport { initialMatchedCombinationState } from './reducer';\nimport { createSelector } from 'reselect';\n\nconst selectMatchedCombinationState = (state: RootState) => state.matchedCombination || initialMatchedCombinationState;\n\nconst selectMatchedCombinationById = createSelector(selectMatchedCombinationState, state => state.byIds);\n\nexport {\n  selectMatchedCombinationState,\n  selectMatchedCombinationById,\n};\n","import { createSelector } from 'reselect';\nimport { RootState } from '../reducer';\nimport { initialPlayersState } from './reducer';\nimport { selectSelectedNumbers } from 'store/gameStatus/selectors';\nimport { makeBingoTable } from 'helpers';\nimport { map as _map, filter as _filter } from 'lodash';\nimport { selectMatchedCombinationById } from 'store/matchedCombination/selectors';\n\nconst selectPlayersState = (state: RootState) => state.players || initialPlayersState;\n\nconst selectByIds = createSelector(selectPlayersState, state => state.byIds);\nconst selectAllIds = createSelector(selectPlayersState, state => state.allIds);\n\nconst selectWinners = createSelector(selectByIds, selectMatchedCombinationById, (byIds, combinations) => _map(\n  _filter(\n    byIds,\n    player => _filter(combinations, combination => combination.playerId === player.id).length >= 5,\n  ),\n  player => player,\n));\n\nconst makeSelectPlayer = (id: string) => createSelector(selectByIds, players => players[id]);\nconst makeSelectPlayerTable = (id: string) => createSelector(makeSelectPlayer(id), player => player.table);\n\nconst makeSelectEveryPlayerData = () => createSelector(selectByIds, selectSelectedNumbers, selectMatchedCombinationById, (players, numbers, combinations) => _map(players, player => ({\n  id: player.id,\n  name: player.name,\n  table: makeBingoTable(player.table, numbers),\n  matchedIndexList: _map(\n    _filter(combinations, combination => combination.playerId === player.id),\n    combination => combination.combination,\n  ),\n})));\n\nconst makeSelectWinnerExist = () => createSelector(selectWinners, winners => winners.length > 0);\nconst makeSelectWinnerName = () => createSelector(selectWinners, (winners) => {\n  if (winners.length === 1) {\n    return winners[0].name;\n  }\n  return null;\n});\n\nexport {\n  selectPlayersState,\n  selectByIds,\n  selectAllIds,\n  selectWinners,\n\n  makeSelectPlayer,\n  makeSelectPlayerTable,\n  makeSelectEveryPlayerData,\n  makeSelectWinnerExist,\n  makeSelectWinnerName,\n};\n","import * as React from 'react';\nimport { RootState } from 'store/reducer';\nimport Alert from 'components/Alert';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { resetGame } from 'store/gameStatus/actions';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectWinnerName, makeSelectWinnerExist } from 'store/players/selectors';\n\ninterface WinnerAlertPropsFromState {\n  isVisible: boolean;\n  winnerName: string|null; // null이면 승자가 없음\n}\n\ninterface WinnerAlertPropsFromDispatch {\n  onConfirm: () => any;\n}\n\ntype WinnerAlertProps = WinnerAlertPropsFromState & WinnerAlertPropsFromDispatch;\n\nconst WinnerAlert: React.FunctionComponent<WinnerAlertProps> = ({ isVisible, winnerName, onConfirm }) => {\n  return (\n    <Alert\n      isVisible={isVisible}\n      message={winnerName === null ? '무승부입니다.' : `${winnerName} 승리입니다.`}\n      onConfirm={onConfirm}\n    />\n  );\n};\n\nconst mapStateToProps = createStructuredSelector<RootState, WinnerAlertPropsFromState>({\n  isVisible: makeSelectWinnerExist(),\n  winnerName: makeSelectWinnerName(),\n});\n\nfunction mapDispatchToProps(dispatch: Dispatch): WinnerAlertPropsFromDispatch {\n  return {\n    onConfirm: () => dispatch(resetGame()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(WinnerAlert);\n","import React from 'react';\nimport { RootState } from 'store/reducer';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Button from 'components/Button';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectIsGameStarted } from 'store/gameStatus/selectors';\nimport { startGame } from 'store/gameStatus/actions';\n\ninterface StartButtonPropsFromState {\n  isGameStarted: boolean;\n}\n\ninterface StartButtonPropsFromDispatch {\n  onClick: () => any;\n}\n\ntype StartButtonProps = StartButtonPropsFromState & StartButtonPropsFromDispatch;\n\nconst StartButton: React.FunctionComponent<StartButtonProps> = ({ isGameStarted, onClick }) => {\n  return (\n    <Button\n      type=\"button\"\n      onClick={onClick}\n    >\n      게임 {isGameStarted ? '재' : ''}시작\n    </Button>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector<RootState, StartButtonPropsFromState>({\n  isGameStarted: makeSelectIsGameStarted(),\n});\n\nfunction mapDispatchToProps(dispatch: Dispatch): StartButtonPropsFromDispatch {\n  return {\n    onClick: () => dispatch(startGame()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(StartButton);\n","import React from 'react';\nimport Player from 'containers/Player';\nimport styled from 'styled-components';\nimport { RootState } from 'store/reducer';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { PlayerData } from 'typing';\nimport WinnerAlert from 'containers/WinnerAlert';\nimport StartButton from 'containers/StartButton';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectCurrentPlayerId } from 'store/gameStatus/selectors';\nimport { makeSelectEveryPlayerData } from 'store/players/selectors';\nimport { map as _map } from 'lodash';\n\ninterface AppPropsFromState {\n  currentPlayerId: string|null;\n  players: PlayerData[];\n}\n\ninterface AppPropsFromDispatch {\n}\n\ntype AppProps = AppPropsFromState & AppPropsFromDispatch;\n\nconst AppContainer = styled.div`\n  margin: 0 auto;\n  max-width: 800px;\n`;\n\nconst Header = styled.header`\n  margin-bottom: 30px;\n`;\n\nconst PlayerContainer = styled.main`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst playersPlaceholder = Array<null>(2).fill(null);\nconst tablePlaceholder = Array<null>(25).fill(null);\n\nconst App: React.FC<AppProps> = ({ currentPlayerId, players }) => {\n  const playerNodeList = _map(\n    players.length > 0 ? players : playersPlaceholder,\n    (player, index) => player === null ? (\n      <Player\n        key={index}\n        name=\"\"\n        table={tablePlaceholder}\n        matchedIndexList={[]}\n        isActive={false}\n      />\n    ) : (\n      <Player\n        key={player.id}\n        name={player.name}\n        table={player.table}\n        matchedIndexList={player.matchedIndexList}\n        isActive={player.id === currentPlayerId}\n      />\n    ),\n  );\n\n  return (\n    <AppContainer>\n      <Header>\n        <h1>React + Redux = Bingo</h1>\n        <StartButton />\n      </Header>\n\n      <PlayerContainer>\n        {playerNodeList}\n      </PlayerContainer>\n\n      <WinnerAlert />\n    </AppContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector<RootState, AppPropsFromState>({\n  currentPlayerId: makeSelectCurrentPlayerId(),\n  players: makeSelectEveryPlayerData(),\n});\n\nfunction mapDispatchToProps(dispatch: Dispatch): AppPropsFromDispatch {\n  return {\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withConnect(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport default GlobalStyle;\n","import { GameStatusAction, UPDATE_CURRENT_PLAYER_ID, RESET_GAME, SELECT_NUMBER, START_GAME } from './actions';\n\nexport interface GameStatusState {\n  currentPlayerId: string|null;\n  selectedNumbers: number[];\n}\n\nconst initialState: GameStatusState = {\n  currentPlayerId: null,\n  selectedNumbers: [],\n};\n\nexport default function gameStatusReducer(state: GameStatusState = initialState, action: GameStatusAction): GameStatusState {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        selectedNumbers: [],\n      };\n    case UPDATE_CURRENT_PLAYER_ID:\n      return {\n        ...state,\n        currentPlayerId: action.id,\n      };\n    case SELECT_NUMBER:\n      return {\n        ...state,\n        selectedNumbers: [\n          ...state.selectedNumbers,\n          action.num,\n        ],\n      };\n    case RESET_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import gameStatusReducer, { GameStatusState } from './gameStatus/reducer';\nimport playersReducer, { PlayersState } from './players/reducer';\nimport { combineReducers } from 'redux';\nimport matchedCombinationReducer, { MatchedCombinationState } from './matchedCombination/reducer';\n\nexport interface RootState {\n  gameStatus: GameStatusState;\n  players: PlayersState;\n  matchedCombination: MatchedCombinationState;\n}\n\nconst reducers = {\n  gameStatus: gameStatusReducer,\n  players: playersReducer,\n  matchedCombination: matchedCombinationReducer,\n};\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;\n","import { makeNewTable } from 'helpers';\nimport { makeSelectCurrentPlayerId } from 'store/gameStatus/selectors';\nimport { START_GAME, updateCurrentPlayerId, selectNumber, SELECT_NUMBER, RESET_GAME } from './actions';\nimport { takeLatest, put, takeEvery, select } from 'redux-saga/effects';\nimport { addPlayer } from 'store/players/actions';\nimport { selectAllIds } from 'store/players/selectors';\nimport { resetMatchedCombination, updateMatchedCombination } from 'store/matchedCombination/actions';\n\nfunction* startGameSaga() {\n  yield put(addPlayer('1', 'Player 1', makeNewTable()));\n  yield put(addPlayer('2', 'Player 2', makeNewTable()));\n  yield put(updateCurrentPlayerId('1'));\n  yield put(resetMatchedCombination());\n}\n\nfunction* selectNumberSaga({ num }: ReturnType<typeof selectNumber>) {\n  const allIds: string[] = yield select(selectAllIds);\n  const currentPlayerId: string = yield select(makeSelectCurrentPlayerId());\n  const currentIndex = allIds.findIndex(id => id === currentPlayerId);\n\n  if (currentIndex === allIds.length - 1) {\n    // 마지막 인덱스인 경우 첫번째 인덱스의 id에게 턴을 넘김\n    yield put(updateCurrentPlayerId(allIds[0]));\n  } else {\n    // 그 외의 경우 다음 인덱스의 id에게 턴을 넘김\n    yield put(updateCurrentPlayerId(allIds[currentIndex + 1]));\n  }\n\n  yield put(updateMatchedCombination(currentPlayerId, num));\n}\n\nfunction* resetGameSaga() {\n  yield put(resetMatchedCombination());\n}\n\nexport default function* gameStatusSaga() {\n  yield takeLatest(START_GAME, startGameSaga);\n  yield takeEvery(SELECT_NUMBER, selectNumberSaga);\n  yield takeLatest(RESET_GAME, resetGameSaga);\n}\n","import { PlayerStateValue } from 'store/players/reducer';\nimport { select, put, all, takeEvery } from 'redux-saga/effects';\nimport { makeSelectPlayerTable } from 'store/players/selectors';\nimport { selectSelectedNumbers } from 'store/gameStatus/selectors';\nimport { BINGO_INDEX_COMBINATION } from 'helpers';\nimport { addMatchedCombination, updateMatchedCombination, UPDATE_MATCHED_COMBINATION } from './actions';\nimport {\n  map as _map,\n  every as _every,\n} from 'lodash';\n\nfunction* updateMatchedCombinationSaga({ playerId, selectedNumber }: ReturnType<typeof updateMatchedCombination>) {\n  const table: PlayerStateValue['table'] = yield select(makeSelectPlayerTable(playerId));\n  const selectedNumbers: number[] = yield select(selectSelectedNumbers);\n\n  yield all(\n    BINGO_INDEX_COMBINATION\n      .filter(combination => combination.includes(table.findIndex(value => value === selectedNumber)))\n      .filter(combination => _every(_map(combination, index => table[index] === selectedNumber || selectedNumbers.includes(table[index]))))\n      .map(combination => put(addMatchedCombination(playerId, combination))),\n  );\n}\n\nexport default function* matchedCombinationSaga() {\n  yield takeEvery(UPDATE_MATCHED_COMBINATION, updateMatchedCombinationSaga);\n}\n","import gameStatusSaga from './gameStatus/saga';\nimport { all } from 'redux-saga/effects';\nimport matchedCombinationSaga from './matchedCombination/saga';\n\nexport default function* rootSaga() {\n  yield all([\n    gameStatusSaga(),\n    matchedCombinationSaga(),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [\n  sagaMiddleware,\n];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(...middleware),\n  ),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport GlobalStyle from './components/GlobalStyle';\nimport store from 'store';\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}